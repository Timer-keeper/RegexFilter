name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
    paths:
      - 'src/**'
      - '*.gradle'
      - 'gradle.properties'
      - '.github/**'
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  format-and-build:
    name: Format & Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      JAVA_VERSION: 21
      GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    outputs:
      mod_name: ${{ steps.extract-mod-info.outputs.MOD_NAME }}
      mod_version: ${{ steps.extract-mod-info.outputs.MOD_VERSION }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fix permissions
        run: chmod +x gradlew

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin
          cache: gradle

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
      
      - name: Run Tests and Format (dev only)
        if: github.ref == 'refs/heads/dev'
        run: |
          ./gradlew test spotlessApply --info
          git config --global user.name "CI Bot"
          git config --global user.email "ci@example.com"
          git add .
          if ! git diff-index --quiet HEAD --; then
            git commit -m "Auto-format code [skip ci] [skip actions]"
            git push origin HEAD:dev
          fi

      - name: Build Only (main)
        if: github.event.pull_request.merged && github.base_ref == 'refs/heads/main'
        run: ./gradlew build

      - name: Extract mod info
        id: extract-mod-info
        run: |
          echo "MOD_VERSION=$(grep 'mod_version' gradle.properties | cut -d'=' -f2)" >> $GITHUB_OUTPUT
          echo "MOD_NAME=$(grep 'archives_base_name' gradle.properties | cut -d'=' -f2)" >> $GITHUB_OUTPUT

         - name: List build artifacts
           run: ls -lR build/

         - name: Upload artifacts
           uses: actions/upload-artifact@v4
           with:
             name: build-outputs
             path: |
               build/libs/*.jar
               build/packages/*.zip

  release:
    name: Create Draft Release
    needs: format-and-build
    if: github.event.pull_request.merged && github.base_ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.format-and-build.outputs.mod_name }}-${{ needs.format-and-build.outputs.mod_version }}.jar
          path: release/

      - name: Create Draft Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ needs.format-and-build.outputs.mod_version }}"
          files: release/*.jar
          draft: true
          generate_release_notes: true
          